{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","candidate","rank","containerStyles","width","margin","padding","buttonStyles","textAlign","backgroundColor","fontWeight","cursor","borderRadius","clearStyles","Object","objectSpread","marginBottom","optionStyles","rankStyles","display","marginRight","height","submitStyles","marginTop","color","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClear","state","forEach","option","setState","totalRank","submitted","handleClick","optionIndex","_this$state","handleSubmit","_this2","react_default","a","createElement","style","onClick","map","i","key","concat","opacity","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9337c771.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst options = [\n  { candidate: \"Barack Obama\", rank: 0 },\n  { candidate: \"George Bush\", rank: 0 },\n  { candidate: \"Hillary Clinton\", rank: 0 },\n  { candidate: \"Bernie Sanders\", rank: 0 },\n  { candidate: \"Marco Rubio\", rank: 0 },\n  { candidate: \"George Washington\", rank: 0 },\n  { candidate: \"John Adams\", rank: 0 },\n  { candidate: \"Abraham Lincoln\", rank: 0 },\n  { candidate: \"Franklin D. Roosevelt\", rank: 0 },\n  { candidate: \"Ron Swanson\", rank: 0 }\n];\n\nconst containerStyles = {\n  width: \"250px\",\n  margin: \"0 auto\",\n  padding: \"15px\"\n};\nconst buttonStyles = {\n  padding: \"8px\",\n  textAlign: \"center\",\n  backgroundColor: \"#d8d8d8\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  borderRadius: \"3px\"\n};\nconst clearStyles = {\n  ...buttonStyles,\n  marginBottom: \"20px\"\n};\nconst optionStyles = {\n  marginBottom: \"8px\",\n  cursor: \"pointer\"\n};\nconst rankStyles = {\n  ...buttonStyles,\n  display: \"inline-block\",\n  marginRight: \"8px\",\n  width: \"20px\",\n  height: \"20px\"\n};\nconst submitStyles = {\n  ...buttonStyles,\n  marginTop: \"20px\",\n  backgroundColor: \"#00b06f\",\n  color: \"white\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { options, totalRank: 0, submitted: false };\n  }\n\n  handleClear = () => {\n    const { options } = this.state;\n    options.forEach(option => (option.rank = 0));\n    this.setState({ options, totalRank: 0, submitted: false });\n  };\n\n  handleClick = optionIndex => {\n    let { options, totalRank } = this.state;\n    if (options[optionIndex].rank) {\n      totalRank--;\n      options.forEach(option => {\n        if (option.rank > options[optionIndex].rank) {\n          option.rank--;\n        }\n      });\n      options[optionIndex].rank = 0;\n    } else {\n      totalRank++;\n      options[optionIndex].rank += totalRank;\n    }\n    this.setState({ options, totalRank });\n  };\n\n  handleSubmit = () => {\n    this.setState({ submitted: !this.state.submitted });\n  };\n\n  render() {\n    return (\n      <div style={containerStyles}>\n        <h1 style={{ textAlign: \"center\" }}>Rank your favorite candidates</h1>\n        <div onClick={this.handleClear} style={clearStyles}>\n          Clear all\n        </div>\n        {this.state.options.map((option, i) => (\n          <div\n            key={`${option.candidate}-${i}`}\n            onClick={() => this.handleClick(i)}\n            style={optionStyles}\n          >\n            <div style={rankStyles}>\n              <div style={{ opacity: option.rank ? 1 : 0 }}>{option.rank}</div>\n            </div>\n            {option.candidate}\n          </div>\n        ))}\n        <div onClick={this.handleSubmit} style={submitStyles}>\n          {this.state.submitted ? \"Nice!\" : \"Submit\"}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}